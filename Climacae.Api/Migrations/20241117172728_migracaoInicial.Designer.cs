// <auto-generated />
using System;
using Climacae.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Climacae.Api.Migrations
{
    [DbContext(typeof(ObservationDbContext))]
    [Migration("20241117172728_migracaoInicial")]
    partial class migracaoInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Climacae.Api.Models.ObservationModel", b =>
                {
                    b.Property<string>("StationId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ObsTimeLocal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DewPointAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("DewPointHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("DewPointLow")
                        .HasColumnType("double precision");

                    b.Property<long>("Epoch")
                        .HasColumnType("bigint");

                    b.Property<double>("HeatIndexAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("HeatIndexHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("HeatIndexLow")
                        .HasColumnType("double precision");

                    b.Property<double>("HumidityAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("HumidityHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("HumidityLow")
                        .HasColumnType("double precision");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ObsTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("PrecipitationRate")
                        .HasColumnType("double precision");

                    b.Property<double>("PrecipitationTotal")
                        .HasColumnType("double precision");

                    b.Property<double>("PressureMax")
                        .HasColumnType("double precision");

                    b.Property<double>("PressureMin")
                        .HasColumnType("double precision");

                    b.Property<double>("PressureTrend")
                        .HasColumnType("double precision");

                    b.Property<int>("QualityControlStatus")
                        .HasColumnType("integer");

                    b.Property<double>("SolarRadiationHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("TempAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("TempHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("TempLow")
                        .HasColumnType("double precision");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<double>("UvHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("WindChillAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("WindChillHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("WindChillLow")
                        .HasColumnType("double precision");

                    b.Property<double>("WindDirectionAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("WindGustAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("WindGustHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("WindGustLow")
                        .HasColumnType("double precision");

                    b.Property<double>("WindspeedAvg")
                        .HasColumnType("double precision");

                    b.Property<double>("WindspeedHigh")
                        .HasColumnType("double precision");

                    b.Property<double>("WindspeedLow")
                        .HasColumnType("double precision");

                    b.HasKey("StationId", "ObsTimeLocal");

                    b.ToTable("Observations");
                });
#pragma warning restore 612, 618
        }
    }
}
